/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ValueObject : A time-varying expression that evaluates to a boolean



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValueObject {
    #[serde(rename = "amount_of_token")]
    pub amount_of_token: Box<crate::models::Token>,
    #[serde(rename = "in_account")]
    pub in_account: Box<crate::models::Party>,
    #[serde(rename = "negate")]
    pub negate: Box<crate::models::Value>,
    #[serde(rename = "add")]
    pub add: Box<crate::models::Value>,
    #[serde(rename = "and")]
    pub and: Box<crate::models::Value>,
    #[serde(rename = "minus")]
    pub minus: Box<crate::models::Value>,
    #[serde(rename = "value")]
    pub value: Box<crate::models::Value>,
    #[serde(rename = "multiply")]
    pub multiply: Box<crate::models::Value>,
    #[serde(rename = "times")]
    pub times: Box<crate::models::Value>,
    #[serde(rename = "by")]
    pub by: Box<crate::models::Value>,
    #[serde(rename = "divide")]
    pub divide: Box<crate::models::Value>,
    #[serde(rename = "value_of_choice")]
    pub value_of_choice: Box<crate::models::ChoiceId>,
    #[serde(rename = "use_value")]
    pub use_value: String,
    #[serde(rename = "else")]
    pub r#else: Box<crate::models::Value>,
    #[serde(rename = "if")]
    pub r#if: Box<crate::models::Observation>,
    #[serde(rename = "then")]
    pub then: Box<crate::models::Value>,
    /// An arbitrary text identifier for an object in a Marlowe object bundle.
    #[serde(rename = "ref")]
    pub r#ref: String,
}

impl ValueObject {
    /// A time-varying expression that evaluates to a boolean
    pub fn new(amount_of_token: crate::models::Token, in_account: crate::models::Party, negate: crate::models::Value, add: crate::models::Value, and: crate::models::Value, minus: crate::models::Value, value: crate::models::Value, multiply: crate::models::Value, times: crate::models::Value, by: crate::models::Value, divide: crate::models::Value, value_of_choice: crate::models::ChoiceId, use_value: String, r#else: crate::models::Value, r#if: crate::models::Observation, then: crate::models::Value, r#ref: String) -> ValueObject {
        ValueObject {
            amount_of_token: Box::new(amount_of_token),
            in_account: Box::new(in_account),
            negate: Box::new(negate),
            add: Box::new(add),
            and: Box::new(and),
            minus: Box::new(minus),
            value: Box::new(value),
            multiply: Box::new(multiply),
            times: Box::new(times),
            by: Box::new(by),
            divide: Box::new(divide),
            value_of_choice: Box::new(value_of_choice),
            use_value,
            r#else: Box::new(r#else),
            r#if: Box::new(r#if),
            then: Box::new(then),
            r#ref,
        }
    }
}


