/*
 * Marlowe Runtime REST API
 *
 * REST API for Marlowe Runtime
 *
 * The version of the OpenAPI document: 0.0.5.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TEAmbiguousTimeIntervalError {
    #[serde(rename = "TEAmbiguousTimeIntervalError")]
    TEAmbiguousTimeIntervalError,
}

impl ToString for TEAmbiguousTimeIntervalError {
    fn to_string(&self) -> String {
        match self {
            Self::TEAmbiguousTimeIntervalError => String::from("TEAmbiguousTimeIntervalError"),
        }
    }
}

impl Default for TEAmbiguousTimeIntervalError {
    fn default() -> TEAmbiguousTimeIntervalError {
        Self::TEAmbiguousTimeIntervalError
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TEApplyNoMatchError {
    #[serde(rename = "TEApplyNoMatchError")]
    TEApplyNoMatchError,
}

impl ToString for TEApplyNoMatchError {
    fn to_string(&self) -> String {
        match self {
            Self::TEApplyNoMatchError => String::from("TEApplyNoMatchError"),
        }
    }
}

impl Default for TEApplyNoMatchError {
    fn default() -> TEApplyNoMatchError {
        Self::TEApplyNoMatchError
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TEUselessTransaction {
    #[serde(rename = "TEUselessTransaction")]
    TEUselessTransaction,
}

impl ToString for TEUselessTransaction {
    fn to_string(&self) -> String {
        match self {
            Self::TEUselessTransaction => String::from("TEUselessTransaction"),
        }
    }
}

impl Default for TEUselessTransaction {
    fn default() -> TEUselessTransaction {
        Self::TEUselessTransaction
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TEHashMismatch {
    #[serde(rename = "TEHashMismatch")]
    TEHashMismatch,
}

impl ToString for TEHashMismatch {
    fn to_string(&self) -> String {
        match self {
            Self::TEHashMismatch => String::from("TEHashMismatch"),
        }
    }
}

impl Default for TEHashMismatch {
    fn default() -> TEHashMismatch {
        Self::TEHashMismatch
    }
}

/// TransactionError : A Marlowe transaction error.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionError {
    AmbiguousTimeIntervalError(TEAmbiguousTimeIntervalError),
    TEApplyNoMatchError(TEApplyNoMatchError),
    InvalidTimeInterval(crate::models::TransactionErrorOneOf),
    UselessTransaction(TEUselessTransaction),
    HashMismatch(TEHashMismatch),
}
